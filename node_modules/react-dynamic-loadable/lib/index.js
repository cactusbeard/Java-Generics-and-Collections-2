import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';
import _Promise from 'babel-runtime/core-js/promise';
import _extends from 'babel-runtime/helpers/extends';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React from 'react';

var defaultLoadingComponent = function defaultLoadingComponent() {
  return null;
};

function asyncComponent(config) {
  var resolve = config.resolve;

  return function (_React$Component) {
    _inherits(Lazyloads, _React$Component);

    function Lazyloads(props) {
      _classCallCheck(this, Lazyloads);

      var _this = _possibleConstructorReturn(this, (Lazyloads.__proto__ || _Object$getPrototypeOf(Lazyloads)).call(this, props));

      _this.LoadingComponent = config.LoadingComponent || defaultLoadingComponent;
      _this.state = {
        AsyncComponent: null
      };
      _this.load(props);
      return _this;
    }

    _createClass(Lazyloads, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        this.mounted = true;
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.mounted = false;
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        if (nextProps.load !== this.props.load) {
          this.load(nextProps);
        }
      }
    }, {
      key: 'load',
      value: function load() {
        var _this2 = this;

        resolve().then(function (mod) {
          var AsyncComponent = mod.default || mod;
          if (_this2.mounted) {
            _this2.setState({ AsyncComponent: AsyncComponent });
          } else {
            _this2.state.AsyncComponent = AsyncComponent; // eslint-disable-line
          }
        });
      }
    }, {
      key: 'render',
      value: function render() {
        var AsyncComponent = this.state.AsyncComponent;
        var LoadingComponent = this.LoadingComponent;

        if (this.state.AsyncComponent) {
          return React.createElement(AsyncComponent, this.props);
        }
        return React.createElement(LoadingComponent, this.props);
      }
    }]);

    return Lazyloads;
  }(React.Component);
}

export default function dynamic(config) {
  var resolveComponent = config.component,
      resolveModels = config.models;

  return asyncComponent(_extends({
    resolve: config.resolve || function () {
      return new _Promise(function (resolve) {
        var models = typeof resolveModels === 'function' ? resolveModels() : [];
        var component = resolveComponent();
        models = !models ? [] : models;
        _Promise.all([].concat(_toConsumableArray(models), [component])).then(function (ret) {
          if (!models || !models.length) {
            return resolve(ret[0]);
          }
          var len = models.length;
          return resolve(ret[len]);
        });
      });
    }
  }, config));
}

dynamic.setDefaultLoadingComponent = function (LoadingComponent) {
  defaultLoadingComponent = LoadingComponent;
};